import Component from 'can/component/';
import Map from 'can/map/';
import 'can/map/define/';
import './receivetransfer.less!';
import template from './receivetransfer.stache!';
import Transfer from 'sr-careplanner/models/transfer';
import qtools from 'node_modules/qtools-minus/';

export const ViewModel = Map.extend({
	define: {
		message: {
			value: 'This is the user-nurse-student-receivetransfer component'
		},
		selectedTransfer: {
			value: Transfer,
			serialize: false
		}
	},

	selectOffer: function(event, offer) {
		event.stopPropagation();
		this.attr('selectedTransfer', offer);
		this.attr('%root').attr('transferResultStatus', '');
	},

	acceptSelectedTransfer: function(event, offer) {
		event.stopPropagation();
		this.attr('%root').attr('transferResultStatus', 'UPDATING ACCEPTED STATUS');
		this.attr('selectedTransfer').attr('status', 'accepted'); //'accepted' corresponds to a constant in api/transfer.js
		this.putSelectedTransfer((err, status) => {
			if (err) {
				this.attr('%root').attr(
					'transferResultStatus',
					`${err.responseJSON.errorText}`
				);
				this.showTransitionDisplay('error');
				return;
			}
		});
	},

	rejectSelectedTransfer: function(event, offer) {
		event.stopPropagation();
		this.attr('%root').attr('transferResultStatus', 'UPDATING REJECTED STATUS');
		this.attr('selectedTransfer').attr('status', 'rejected'); //'rejected' corresponds to a constant in api/transfer.js
		this.putSelectedTransfer((err, status) => {
			if (err) {
				this.attr('%root').attr(
					'transferResultStatus',
					`${err.responseJSON.errorText}`
				);
				this.showTransitionDisplay('error');
				return;
			}
		});
	},
	
	putSelectedTransfer: function(callback) {
		const localCallback = updatedTransferRec => {
			let transfersRecipient = this.attr('%root')
				.attr('loginUserWorkingData')
				.attr('transfersRecipient');
			transfersRecipient = transfersRecipient.filter(
				item => item.attr('refId') != updatedTransferRec.refId
			);
			this.attr('%root')
				.attr('loginUserWorkingData')
				.attr('transfersRecipient', transfersRecipient);
				
			this.attr('%root').attr('transfersRecipientCount', transfersRecipient.length); //this signals the Review Transfers button

			/*
				 The nurse tool operates on a list of students generated by a model based on
				 data retrieved from the server. I cannot inject the new students into that list 
				 so they do not appear on the selector list. Despite a lot of painful effort,
				 I cannot find a way to just make the model refresh the student list on its own.
				 The only solution I could find was to restart the tool entirely. Despite a lot 
				 of painful effort, I could not find a way to make it do that on its own. The only
				 solution I could find was to start a different tool and then start the nurse tool
				 again. This created an ugly UI with flashes and such (this receiveTransfer tool
				 is inside the nurse tool). It is way too much effort to relocate this tool outside
				 of the nurse tool so, I added the following pile of hacked UI sugar to make it
				 look like things are working nicely. Sorry, tqii, 1/2019
			*/

			this.showTransitionDisplay(updatedTransferRec.status, transfersRecipient.length);
			callback();
		};

		const selectedTransfer = this.attr('selectedTransfer');
		new Transfer.Transfer(selectedTransfer.attr())
			.save()
			.then(localCallback, err => {
				callback(err);
			});
		
	},
	
	showTransitionDisplay: function(category, offersRemaining=1) {
		

		this.attr('%root').setNewPage('transitiondisplay', '', '');
		$('#transitionMessage').animate({ fontSize: '60pt' }, 500, () => {
			$('#transitionMessage').animate({ opacity: 0.25 }, 500, () => {
				$('user-nurse-student-receivetransfer').css({ opacity: 0 });
				$('.studentTransferHackContainer').css({ opacity: 0 });
				$('user-nurse-student-receivetransfer').animate({ opacity: 1 }, 500);
				setTimeout(() => {
					this.attr('%root').setNewPage('nurse', '', '');
					$('.studentTransferHackContainer').animate({ opacity: 1 }, 100);
					switch (category) {
						case 'error':
							this.attr('%root').attr('transferResultStatus',
								`<div>${this.attr('%root').attr('transferResultStatus')}</div><div style='color:red;'>Please log back in to clear the error.</div>`
							);
							break;
						case 'accepted':
							this.attr('%root').attr(
								'transferResultStatus',
								'Transfer complete. Students have been added to your list.'
							);
							break;
						case 'rejected':
							this.attr('%root').attr(
								'transferResultStatus',
								'Processing complete. Transfer offer has been cancelled.'
							);
							break;
					}
					
					if (category=='error'){
					setTimeout(()=>{
						window.location.href='/';
					}, 4000);
					}
					else if (!offersRemaining){
					setTimeout(()=>{
						this.attr('%root').attr('showReceiveTransferTool', false);
					}, 2000);
					}
				}, 100);
			});
		});
	}
});

export default Component.extend({
	tag: 'user-nurse-student-receivetransfer',
	viewModel: ViewModel,
	template
});
